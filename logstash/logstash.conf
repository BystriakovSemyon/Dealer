input {
  http {
    port => 9253
    request_headers_target_field => "req_headers"
    remote_host_target_field => "application_host"
    add_field => {
      "source" => "http_request"
    }
  }
  gelf {}
}

filter {
  # Add current timestamp if it no present
  if (![@timestamp]){
    ruby {
      init => "require 'time'"
      code => "event.set('@timestamp', Time.now())"
    }
  }


 if  [container_name] == "hasura" {
    json {
      source => "message"
    }
    mutate {
      add_field => { "app_id" => "${CAP_ELK_APP_ID}" }
      add_field => { "srv" => "dsm-backend-hasura" }
      update => { "tag" => "tech" }
      rename => { "level" => "levelname" }
      uppercase => ["levelname"]
    }
  }

  if "app" in [tags] {
    if [body] {
      mutate {
        rename => { "body" => "message" }
      }
    }
    mutate {
      rename => { "[headers][app_id]" => "app_id" }
      rename => { "[headers][type_id]" => "type_id" }
      rename => { "[headers][timestamp]" => "event_timestamp" }
    }
  }
  mutate {
    remove_field => ["[context][elasticResponse]", "[context][nodeResponse]"]
  }
  ruby {
    code => "
      event.set('[metrics][message_length]', event.get('message').length)
      event.set('[metrics][message_bytesize]', event.get('message').bytesize)
    "
  }
  if [metrics][message_bytesize] > 2097152 { # 2Mb
    truncate {
      fields => ['message']
      length_bytes => 2097152 # 2Mb
      add_tag => ["long_message"]
    }
  }
  if "audit" in [tag] {
    mutate {
      add_field => { "type_id" => "audit" }
    }
  }
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["${ELASTICSEARCH_HOSTS}"]
    index => "logs"
    # ilm policy должно быть уже создано перед запуском logstash, по этому в dev режиме мы его не будем использовать,
    # но оснтавим как комментарий что бы не забыть
    #ilm_policy => "logs-policy"
    #ilm_rollover_alias => "logs"
    #ilm_pattern => "{now/d}-000001"
    manage_template => "false"
    #отключено так как в шаблоне указан ilm policy
    #template => "/usr/share/logstash/config/logs-template.json"
    #template_name => "logs"
    #template_overwrite => "true"
  }
}
